// Code generated by mockery. DO NOT EDIT.

package mockcompactor

import (
	bbolt "go.etcd.io/bbolt"

	iter "github.com/grafana/pyroscope/pkg/iter"

	metastorev1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"

	mock "github.com/stretchr/testify/mock"

	raft "github.com/hashicorp/raft"
)

// MockTombstones is an autogenerated mock type for the Tombstones type
type MockTombstones struct {
	mock.Mock
}

type MockTombstones_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTombstones) EXPECT() *MockTombstones_Expecter {
	return &MockTombstones_Expecter{mock: &_m.Mock}
}

// GetExpiredTombstones provides a mock function with given fields: _a0, _a1
func (_m *MockTombstones) GetExpiredTombstones(_a0 *bbolt.Tx, _a1 *raft.Log) iter.Iterator[*metastorev1.Tombstones] {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetExpiredTombstones")
	}

	var r0 iter.Iterator[*metastorev1.Tombstones]
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, *raft.Log) iter.Iterator[*metastorev1.Tombstones]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iter.Iterator[*metastorev1.Tombstones])
		}
	}

	return r0
}

// MockTombstones_GetExpiredTombstones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpiredTombstones'
type MockTombstones_GetExpiredTombstones_Call struct {
	*mock.Call
}

// GetExpiredTombstones is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
//   - _a1 *raft.Log
func (_e *MockTombstones_Expecter) GetExpiredTombstones(_a0 interface{}, _a1 interface{}) *MockTombstones_GetExpiredTombstones_Call {
	return &MockTombstones_GetExpiredTombstones_Call{Call: _e.mock.On("GetExpiredTombstones", _a0, _a1)}
}

func (_c *MockTombstones_GetExpiredTombstones_Call) Run(run func(_a0 *bbolt.Tx, _a1 *raft.Log)) *MockTombstones_GetExpiredTombstones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(*raft.Log))
	})
	return _c
}

func (_c *MockTombstones_GetExpiredTombstones_Call) Return(_a0 iter.Iterator[*metastorev1.Tombstones]) *MockTombstones_GetExpiredTombstones_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTombstones_GetExpiredTombstones_Call) RunAndReturn(run func(*bbolt.Tx, *raft.Log) iter.Iterator[*metastorev1.Tombstones]) *MockTombstones_GetExpiredTombstones_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTombstones creates a new instance of MockTombstones. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTombstones(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTombstones {
	mock := &MockTombstones{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
