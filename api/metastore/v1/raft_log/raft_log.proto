syntax = "proto3";

package raft_log;

import "metastore/v1/metastore.proto";
import "metastore/v1/compactor.proto";

enum RaftCommand {
  RAFT_COMMAND_UNKNOWN = 0;
  RAFT_COMMAND_ADD_BLOCK_METADATA = 1;
  RAFT_COMMAND_GET_COMPACTION_PLAN_UPDATE = 2;
  RAFT_COMMAND_UPDATE_COMPACTION_PLAN = 3;
}

message AddBlockMetadataRequest {
  metastore.v1.BlockMeta metadata = 1;
}

message AddBlockMetadataResponse {}

// GetCompactionPlanUpdateRequest requests CompactionPlanUpdate.
// The resulting plan should be proposed to the raft members.
// This is a read-only operation: it MUST NOT alter the state.
message GetCompactionPlanUpdateRequest {
  // CompactionJobStatusUpdate is a change
  // requested by the compaction worker.
  repeated metastore.v1.CompactionJobStatusUpdate status_updates = 1;
  uint32 assign_jobs_max = 2;
  uint32 delete_tombstones_max = 3;
}

// GetCompactionPlanUpdateResponse includes the planned change.
// The plan should be proposed to the raft members.
message GetCompactionPlanUpdateResponse {
  CompactionPlanUpdate plan_update = 1;
}

message CompactionPlanUpdate {
  repeated metastore.v1.CompactionJob compaction_jobs = 1;
  repeated CompactionJobState job_updates = 2;
}

// CompactionJobState is produced in response to
// the compaction worker status update request.
message CompactionJobState {
  string name = 1;
  uint32 compaction_level = 2;
  metastore.v1.CompactionJobStatus status = 3;

  uint64 token = 4;
  int64 lease_expires_at = 5;
  int64 added_at = 6;
  uint32 failures = 7;

  // Only present if the status is SUCCESS.
  CompactedBlocks compacted_blocks = 8;
}

message CompactedBlocks {
  string job_name = 1;
  string tenant = 2;
  uint32 shard = 3;
  uint32 compaction_level = 4;
  repeated string source_blocks = 5;
  repeated metastore.v1.BlockMeta compacted_blocks = 6;
  repeated string deleted_blocks = 7;
}

// UpdateCompactionPlanRequest proposes compaction plan changes.
message UpdateCompactionPlanRequest {
  CompactionPlanUpdate plan_update = 1;
}

message UpdateCompactionPlanResponse {}
