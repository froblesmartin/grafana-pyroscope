syntax = "proto3";

package metastore.v1;

import "metastore/v1/metastore.proto";

service CompactionPlanner {
  // Used to both retrieve jobs and update the jobs status at the same time.
  rpc PollCompactionJobs(PollCompactionJobsRequest) returns (PollCompactionJobsResponse) {}
}

message PollCompactionJobsRequest {
  // A batch of status updates for in-progress jobs from a worker.
  repeated CompactionJobStatusUpdate status_updates = 1;
  // How many new jobs a worker can be assigned to.
  uint32 job_capacity = 2;
  // Max number of block tombstones a worker can clean up
  // in a single compaction job.
  uint32 cleanup_capacity = 3;
}

message PollCompactionJobsResponse {
  repeated CompactionJob compaction_jobs = 1;
  repeated CompactionJobAssignment assignments = 2;
}

message CompactionJob {
  string name = 1;
  uint32 shard = 2;
  string tenant = 3;
  uint32 compaction_level = 4;
  repeated metastore.v1.BlockMeta source_blocks = 5;
  repeated string tombstones = 6;
}

message CompactionJobAssignment {
  uint64 token = 1;
  int64 lease_expires_at = 2;
  CompactionJobStatus job_status = 3;
}

message CompactionJobStatusUpdate {
  string name = 1;
  string tenant = 2;
  string shard = 3;
  uint32 compaction_level = 4;
  uint64 token = 5;
  CompactionJobStatus status = 6;
  repeated metastore.v1.BlockMeta compacted_blocks = 7;
  repeated string deleted_blocks = 8;
}

enum CompactionJobStatus {
  COMPACTION_STATUS_UNSPECIFIED = 0;
  COMPACTION_STATUS_IN_PROGRESS = 1;
  COMPACTION_STATUS_SUCCESS = 2;
  COMPACTION_STATUS_FAILURE = 3;
  COMPACTION_STATUS_CANCELLED = 15;
}
